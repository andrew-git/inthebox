/***  HomeMade by shoe[box]**  Redistribution and use in source and binary forms, with or without *  modification, are permitted provided that the following conditions are*  met:** Redistributions of source code must retain the above copyright notice, *   this list of conditions and the following disclaimer.*  * Redistributions in binary form must reproduce the above copyright*    notice, this list of conditions and the following disclaimer in the *    documentation and/or other materials provided with the distribution.*  * Neither the name of shoe[box] nor the names of its * contributors may be used to endorse or promote products derived from * this software without specific prior written permission.* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.libs.nevermind.entity;	import org.shoebox.core.Vector2D;	import org.shoebox.geom.AABB;		/**	 * org.shoebox.libs.nevermind.entity.MovingEntity	* @author shoebox	*/	class MovingEntity{				public var radius   : Float;		public var position : Vector2D;				public var bounds 		( default 		, default ) 	: AABB;		public var edgeBehavior ( default 		, default ) 	: EdgeBehavior;		public var mass			( default		, setMass )     : Float;		public var maxSpeed		( default 		, setMaxSpeed ) : Float;		public var rotation		( getRotation 	, null )        : Float;		public var velocity		( default 		, setVelocity ) : Vector2D;						private var _nFactor       : Float;		private var _nMass         : Float;				// -------o constructor					/**			* Constructor of the MovingEntity class			*			* @public			* @return	void			*/			public function new() : Void {				_nFactor       = -1;				_nMass         = 1.0;				maxSpeed       = 10.0;				position       = new Vector2D( );				velocity       = new Vector2D( );				edgeBehavior   = NONE;			}		// -------o public						public function setFactor( n : Float ) : Void {				_nFactor = n;				}								/**			* get maxSpeed function			* @private			* @param 			* @return			*/			private function getMaxSpeed() : Float {				return maxSpeed;			}						/**			* set maxSpeed function			* @public			* @param 			* @return			*/			private function setMaxSpeed( n : Float ) : Float {				return maxSpeed = n;			}									/**			* update function			* 			* @public			* @param 			* @return			*/			public function update() : Void {				velocity = velocity.truncate( maxSpeed );											if ( _nFactor != -1 ) {					var vTmp : Vector2D = velocity.clone( );					vTmp.scaleBy( _nFactor );					position.incrementBy( vTmp );				}else					position.incrementBy( velocity );				_edgeBehavior( );							}						/**			* get rotation function			* @public			* @param 			* @return			*/			public function getRotation() : Float {				return velocity.angle;			}						/**			* set velocity function			* 			* @public			* @param 			* @return			*/			public function setVelocity( v : Vector2D ) : Vector2D {				return velocity = v;			}						/**			* get velocity function			* 			* @public			* @param 			* @return			*/			public function getVelocity() : Vector2D {				return velocity;			}						/**			* set mass function			* @public			* @param 			* @return			*/			public function setMass( n : Float ) : Float {				return this.mass = n;			}			/**			* 			* 			* @private			* @return	void			*/			private function _edgeBehavior( ) : Void{								switch( edgeBehavior ){										case BOUNCE:						var f = position.x + radius;						if( f > bounds.max.x || position.x <= ( bounds.min.x + radius ) )							velocity.x = -velocity.x;												f = position.y + radius;						if( f > bounds.max.y || position.y <= (bounds.min.y + radius ) )							velocity.y = -velocity.y;					case NONE:					case WRAP:										}			}					// -------o private		// -------o misc	}enum EdgeBehavior{	BOUNCE;	NONE;	WRAP;}